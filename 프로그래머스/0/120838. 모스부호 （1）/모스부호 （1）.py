def solution(letter):
    # 모스 부호와 알파벳을 매핑하는 딕셔너리 생성
    morse = {
        '.-':'a','-...':'b','-.-.':'c','-..':'d','.':'e','..-.':'f',
        '--.':'g','....':'h','..':'i','.---':'j','-.-':'k','.-..':'l',
        '--':'m','-.':'n','---':'o','.--.':'p','--.-':'q','.-.':'r',
        '...':'s','-':'t','..-':'u','...-':'v','.--':'w','-..-':'x',
        '-.--':'y','--..':'z'
    }

    # 입력된 모스 부호 문자열을 공백(' ')을 기준으로 나누어 리스트로 저장
    letter = letter.split(' ')

    # 변환된 알파벳을 저장할 리스트 초기화
    answer = []

    # 분리된 모스 부호를 하나씩 반복하여 변환
    for i in letter:
        # 해당 모스 부호를 딕셔너리에서 찾아 알파벳으로 변환 후 리스트에 추가
        answer.append(morse[i])

    # 리스트에 저장된 알파벳들을 하나의 문자열로 합쳐 최종 결과 반환
    return ''.join(answer)

# ✅ 예제 테스트 실행
print(solution(".... . .-.. .-.. ---"))
# 결과: "hello" (각 모스 부호를 변환하면 h-e-l-l-o)

print(solution(".--. -.-- - .... --- -."))
# 결과: "python" (각 모스 부호를 변환하면 p-y-t-h-o-n